<!DOCTYPE HTML>
<html>

<head>
  <title>CHUAN PHAM</title>
  <meta name="description" content="website description" />
  <meta name="keywords" content="website keywords, website keywords" />
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <link rel="stylesheet" type="text/css" href="style/style.css" title="style" />
</head>

<body>
  <div id="main">
    <div id="header">
      <div id="logo">
        <div id="logo_text">
          <!-- class="logo_colour", allows you to change the colour of the text -->
          <h1><a href="index.html">Chuan Pham<span class="logo_colour">'s Page</span></a></h1>
          <h2>“Be still like a mountain and flow like a great river.”
            ― Lao Tzu</h2>
        </div>
      </div>
      <div id="menubar">
        <ul id="menu">
          <!-- put class="selected" in the li tag for the selected page - to highlight which page you're on -->
          <li class="selected"><a href="index.htm">Home</a></li>
          <li><a href="#">Publication</a></li>
          <li><a href="tech.htm">Technical blog</a></li>
          <li><a href="project.htm">Projects</a></li>
          <li><a href="contact.html">Contact</a></li>
        </ul>
      </div>
    </div>
    <div id="site_content">
      <div class="sidebar">
        <!-- insert your sidebar items here -->
        <h3>Latest News</h3>

        <!-- <h4>New Website Launched</h4>
        <h5>January 1st, 2014</h5>
        <p>2014 sees the redesign of our website. Take a look around and let us know what you think.<br /><a href="#">Read more</a></p>
        <p></p>
        <h4>New Website Launched</h4>
        <h5>January 1st, 2014</h5>
        <p>2014 sees the redesign of our website. Take a look around and let us know what you think.<br /><a href="#">Read more</a></p>
        <h3>Useful Links</h3> -->

        <ul>
          <li>Chuan Pham,  Njah, et al. "Share to Run IoT Services in Edge Cloud Computing",   IEEE Internet of Things Journal, 2021 (Accepted).</li>
          <li>Chuan Pham, et al. "Optimized IoT service chain implementation in edge cloud platform: A deep learning framework", IEEE Trans. TNSM, 2021 (Accepted).</li>          
        </ul>
        <h3>Search</h3>
        <form method="post" action="#" id="search_form">
          <p>
            <input class="search" type="text" name="search_field" value="Enter keywords....." />
            <input name="search" type="image" style="border: 0; margin: 0 0 -9px 5px;" src="style/search.png" alt="Search" title="Search" />
          </p>
        </form>
      </div>
      <div id="content">
        <!-- insert the page content here -->
        <h1>Calculate SINR</h1>
        <p>For those trying to make the connection between<span>&nbsp;</span><a href="https://en.wikipedia.org/wiki/Signal-to-noise_ratio" rel="noreferrer">SNR</a><span>&nbsp;</span>and a normal random variable generated by NumPy:</p>
        <p>[1]<span>&nbsp;</span><img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%7BSNR%7D%20=%20%5Cfrac%7BP_%5Cmathrm%7Bsignal%7D%7D%7BP_%5Cmathrm%7Bnoise%7D%7D" alt="SNR ratio" />, where it's important to keep in mind that P is<span>&nbsp;</span><em>average</em><span>&nbsp;</span>power.</p>
        <p>Or in dB:<br />[2]<span>&nbsp;</span><img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cmathrm%7BSNR_%7BdB%7D%7D%20=%20%7BP_%5Cmathrm%7Bsignal%2CdB%7D%20-%20P_%5Cmathrm%7Bnoise%2CdB%7D%7D" alt="SNR dB2" /></p>
        <p>In this case, we already have a signal and we want to generate noise to give us the desired SNR.</p>
        <p>While noise can come in different<span>&nbsp;</span>flavors<span>&nbsp;</span>depending on what you are modeling, a good start (especially for this radio telescope example) is<span>&nbsp;</span><a href="https://en.wikipedia.org/wiki/Additive_white_Gaussian_noise" rel="noreferrer">Additive White Gaussian Noise (AWGN)</a>. As stated in the previous answers, to model AWGN you need to add a zero-mean Gaussian random variable to your original signal. The variance of that random variable will affect the<span>&nbsp;</span><em>average</em><span>&nbsp;</span>noise power.</p>
        <p>For a Gaussian random variable X, the average power<span>&nbsp;</span><img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=E%5BX%5E2%5D" alt="Ep" />, also known as the second<span>&nbsp;</span>moment, is<br />[3]<span>&nbsp;</span><img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=E%5BX%5E2%5D%3D%5Cmu%5E2%2B%5Csigma%5E2" alt="Ex" /></p>
        <p>So for white noise,<span>&nbsp;</span><img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cmu=0" alt="Ex" /><span>&nbsp;</span>and the average power is then equal to the variance<span>&nbsp;</span><img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Csigma%5E2" alt="Ex" />.</p>
        <p>When modeling this in python, you can either<br />1. Calculate variance based on the desired SNR and a set of existing measurements.<br />2. Alternatively, we could set noise power to a known level to match something like receiver noise.</p>
<p>It's important to make sure that you add noise to the signal and take averages in the linear space and not in dB units.</p>
<p>Here's some code to generate a signal and plot voltage, power in Watts, and power in dB:</p>
<pre class="lang-py s-code-block"><code class="hljs language-python"><span class="hljs-comment"># Signal Generation</span>
    <span class="hljs-comment"># matplotlib inline</span>
    
    <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
    <span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt
    
    t = np.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>)
    x_volts = <span class="hljs-number">10</span>*np.sin(t/(<span class="hljs-number">2</span>*np.pi))
    plt.subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)
    plt.plot(t, x_volts)
    plt.title(<span class="hljs-string">'Signal'</span>)
    plt.ylabel(<span class="hljs-string">'Voltage (V)'</span>)
    plt.xlabel(<span class="hljs-string">'Time (s)'</span>)
    plt.show()
    
    x_watts = x_volts ** <span class="hljs-number">2</span>
    plt.subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)
    plt.plot(t, x_watts)
    plt.title(<span class="hljs-string">'Signal Power'</span>)
    plt.ylabel(<span class="hljs-string">'Power (W)'</span>)
    plt.xlabel(<span class="hljs-string">'Time (s)'</span>)
    plt.show()
    
    x_db = <span class="hljs-number">10</span> * np.log10(x_watts)
    plt.subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)
    plt.plot(t, x_db)
    plt.title(<span class="hljs-string">'Signal Power in dB'</span>)
    plt.ylabel(<span class="hljs-string">'Power (dB)'</span>)
    plt.xlabel(<span class="hljs-string">'Time (s)'</span>)
    plt.show()
    </code></pre>
    <p><a href="https://i.stack.imgur.com/8UNws.png" rel="noreferrer"><img src="https://i.stack.imgur.com/8UNws.png" alt="Generated Signal" /></a></p>
    <p>Here's an example for adding AWGN based on a desired SNR:</p>
    <pre class="lang-py s-code-block"><code class="hljs language-python"><span class="hljs-comment"># Adding noise using target SNR</span>
    
    <span class="hljs-comment"># Set a target SNR</span>
    target_snr_db = <span class="hljs-number">20</span>
    <span class="hljs-comment"># Calculate signal power and convert to dB </span>
    sig_avg_watts = np.mean(x_watts)
    sig_avg_db = <span class="hljs-number">10</span> * np.log10(sig_avg_watts)
    <span class="hljs-comment"># Calculate noise according to [2] then convert to watts</span>
    noise_avg_db = sig_avg_db - target_snr_db
    noise_avg_watts = <span class="hljs-number">10</span> ** (noise_avg_db / <span class="hljs-number">10</span>)
    <span class="hljs-comment"># Generate an sample of white noise</span>
    mean_noise = <span class="hljs-number">0</span>
    noise_volts = np.random.normal(mean_noise, np.sqrt(noise_avg_watts), <span class="hljs-built_in">len</span>(x_watts))
    <span class="hljs-comment"># Noise up the original signal</span>
    y_volts = x_volts + noise_volts
    
    <span class="hljs-comment"># Plot signal with noise</span>
    plt.subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)
    plt.plot(t, y_volts)
    plt.title(<span class="hljs-string">'Signal with noise'</span>)
    plt.ylabel(<span class="hljs-string">'Voltage (V)'</span>)
    plt.xlabel(<span class="hljs-string">'Time (s)'</span>)
    plt.show()
    <span class="hljs-comment"># Plot in dB</span>
    y_watts = y_volts ** <span class="hljs-number">2</span>
    y_db = <span class="hljs-number">10</span> * np.log10(y_watts)
    plt.subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)
    plt.plot(t, <span class="hljs-number">10</span>* np.log10(y_volts**<span class="hljs-number">2</span>))
    plt.title(<span class="hljs-string">'Signal with noise (dB)'</span>)
    plt.ylabel(<span class="hljs-string">'Power (dB)'</span>)
    plt.xlabel(<span class="hljs-string">'Time (s)'</span>)
    plt.show()
    </code></pre>
    <p><a href="https://i.stack.imgur.com/82NT4.png" rel="noreferrer"><img src="https://i.stack.imgur.com/82NT4.png" alt="Signal with target SNR" /></a></p>
    <p>And here's an example for adding AWGN based on a known noise power:</p>
    <pre class="lang-py s-code-block"><code class="hljs language-python"><span class="hljs-comment"># Adding noise using a target noise power</span>
    
    <span class="hljs-comment"># Set a target channel noise power to something very noisy</span>
    target_noise_db = <span class="hljs-number">10</span>
    
    <span class="hljs-comment"># Convert to linear Watt units</span>
    target_noise_watts = <span class="hljs-number">10</span> ** (target_noise_db / <span class="hljs-number">10</span>)
    
    <span class="hljs-comment"># Generate noise samples</span>
    mean_noise = <span class="hljs-number">0</span>
    noise_volts = np.random.normal(mean_noise, np.sqrt(target_noise_watts), <span class="hljs-built_in">len</span>(x_watts))
    
    <span class="hljs-comment"># Noise up the original signal (again) and plot</span>
    y_volts = x_volts + noise_volts
    
    <span class="hljs-comment"># Plot signal with noise</span>
    plt.subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)
    plt.plot(t, y_volts)
    plt.title(<span class="hljs-string">'Signal with noise'</span>)
    plt.ylabel(<span class="hljs-string">'Voltage (V)'</span>)
    plt.xlabel(<span class="hljs-string">'Time (s)'</span>)
    plt.show()
    <span class="hljs-comment"># Plot in dB</span>
    y_watts = y_volts ** <span class="hljs-number">2</span>
    y_db = <span class="hljs-number">10</span> * np.log10(y_watts)
    plt.subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)
    plt.plot(t, <span class="hljs-number">10</span>* np.log10(y_volts**<span class="hljs-number">2</span>))
    plt.title(<span class="hljs-string">'Signal with noise'</span>)
    plt.ylabel(<span class="hljs-string">'Power (dB)'</span>)
    plt.xlabel(<span class="hljs-string">'Time (s)'</span>)
    plt.show()
    </code></pre>
    <p><a href="https://i.stack.imgur.com/mbwvd.png" rel="noreferrer"><img src="https://i.stack.imgur.com/mbwvd.png" alt="Signal with target noise level" /></a></p>
      </div>
      
    </div>
    <div id="footer">
      @ Chuan Pham &copy;  
    </div>
  </div>
</body>
</html>
